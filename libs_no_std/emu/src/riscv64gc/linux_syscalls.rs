#[allow(non_camel_case_types)]
/// Enum generated by:
/// ```python
/// import re
/// import requests
/// syscalls = re.findall(
///     r"__NR_(.+) (\d+)", 
///     requests.get("https://raw.githubusercontent.com/riscv-collab/riscv-gnu-toolchain/master/linux-headers/include/asm-generic/unistd.h").text
/// )
/// print("\n".join(
///     f"\t{name} = {number},"
///     for name, number in syscalls
/// ))
/// print("\n".join(
///     f"\t{number} => Ok(LinuxSyscall::{name}),"
///     for name, number in syscalls
/// ))
/// ```
#[repr(u64)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum LinuxSyscall {
	/// long sys_io_setup(unsigned nr_reqs, aio_context_t __user *ctx);
	io_setup = 0,
	/// long sys_io_destroy(aio_context_t ctx);
	io_destroy = 1,
	/// long sys_io_submit(aio_context_t, long, struct iocb __user * __user *);
	io_submit = 2,
	/// long sys_io_cancel(aio_context_t ctx_id, struct iocb __user *iocb, struct io_event __user *result);
	io_cancel = 3,
	/// long sys_io_getevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct __kernel_timespec __user *timeout);
	io_getevents = 4,
	/// long sys_setxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);
	setxattr = 5,
	/// long sys_lsetxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);
	lsetxattr = 6,
	/// long sys_fsetxattr(int fd, const char __user *name, const void __user *value, size_t size, int flags);
	fsetxattr = 7,
	/// long sys_getxattr(const char __user *path, const char __user *name, void __user *value, size_t size);
	getxattr = 8,
	/// long sys_lgetxattr(const char __user *path, const char __user *name, void __user *value, size_t size);
	lgetxattr = 9,
	/// long sys_fgetxattr(int fd, const char __user *name, void __user *value, size_t size);
	fgetxattr = 10,
	/// long sys_listxattr(const char __user *path, char __user *list, size_t size);
	listxattr = 11,
	/// long sys_llistxattr(const char __user *path, char __user *list, size_t size);
	llistxattr = 12,
	/// long sys_flistxattr(int fd, char __user *list, size_t size);
	flistxattr = 13,
	/// long sys_removexattr(const char __user *path, const char __user *name);
	removexattr = 14,
	/// long sys_lremovexattr(const char __user *path, const char __user *name);
	lremovexattr = 15,
	/// long sys_fremovexattr(int fd, const char __user *name);
	fremovexattr = 16,
	/// long sys_getcwd(char __user *buf, unsigned long size);
	getcwd = 17,
	/// long sys_lookup_dcookie(u64 cookie64, char __user *buf, size_t len);
	lookup_dcookie = 18,
	/// long sys_eventfd2(unsigned int count, int flags);
	eventfd2 = 19,
	/// long sys_epoll_create1(int flags);
	epoll_create1 = 20,
	/// long sys_epoll_ctl(int epfd, int op, int fd, struct epoll_event __user *event);
	epoll_ctl = 21,
	/// long sys_epoll_pwait(int epfd, struct epoll_event __user *events, int maxevents, int timeout, const sigset_t __user *sigmask, size_t sigsetsize);
	epoll_pwait = 22,
	/// long sys_dup(unsigned int fildes);
	dup = 23,
	/// long sys_dup3(unsigned int oldfd, unsigned int newfd, int flags);
	dup3 = 24,
	/// long sys_fcntl64(unsigned int fd, unsigned int cmd, unsigned long arg);
	fcntl64 = 25,
	/// long sys_inotify_init1(int flags);
	inotify_init1 = 26,
	/// long sys_inotify_add_watch(int fd, const char __user *path, u32 mask);
	inotify_add_watch = 27,
	/// long sys_inotify_rm_watch(int fd, __s32 wd);
	inotify_rm_watch = 28,
	/// long sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);
	ioctl = 29,
	/// long sys_ioprio_set(int which, int who, int ioprio);
	ioprio_set = 30,
	/// long sys_ioprio_get(int which, int who);
	ioprio_get = 31,
	/// long sys_flock(unsigned int fd, unsigned int cmd);
	flock = 32,
	/// long sys_mknodat(int dfd, const char __user * filename, umode_t mode, unsigned dev);
	mknodat = 33,
	/// long sys_mkdirat(int dfd, const char __user * pathname, umode_t mode);
	mkdirat = 34,
	/// long sys_unlinkat(int dfd, const char __user * pathname, int flag);
	unlinkat = 35,
	/// long sys_symlinkat(const char __user * oldname, int newdfd, const char __user * newname);
	symlinkat = 36,
	/// long sys_unlinkat(int dfd, const char __user * pathname, int flag);
	linkat = 37,
	/// long sys_renameat(int olddfd, const char __user * oldname, int newdfd, const char __user * newname);
	renameat = 38,
	/// long sys_umount(char __user *name, int flags);
	umount = 39,
	/// long sys_umount(char __user *name, int flags);
	mount = 40,
	/// long sys_pivot_root(const char __user *new_root, const char __user *put_old);
	pivot_root = 41,
	/// long sys_ni_syscall(void);
	ni_syscall = 42,
	/// long sys_statfs64(const char __user *path, size_t sz, struct statfs64 __user *buf);
	statfs64 = 43,
	/// long sys_fstatfs64(unsigned int fd, size_t sz, struct statfs64 __user *buf);
	fstatfs64 = 44,
	/// long sys_truncate64(const char __user *path, loff_t length);
	truncate64 = 45,
	/// long sys_ftruncate64(unsigned int fd, loff_t length);
	ftruncate64 = 46,
	/// long sys_fallocate(int fd, int mode, loff_t offset, loff_t len);
	fallocate = 47,
	/// long sys_faccessat(int dfd, const char __user *filename, int mode);
	faccessat = 48,
	/// long sys_chdir(const char __user *filename);
	chdir = 49,
	/// long sys_fchdir(unsigned int fd);
	fchdir = 50,
	/// long sys_chroot(const char __user *filename);
	chroot = 51,
	/// long sys_fchmod(unsigned int fd, umode_t mode);
	fchmod = 52,
	/// long sys_fchmodat(int dfd, const char __user * filename, umode_t mode);
	fchmodat = 53,
	/// long sys_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag);
	fchownat = 54,
	/// long sys_fchown(unsigned int fd, uid_t user, gid_t group);
	fchown = 55,
	/// long sys_openat(int dfd, const char __user *filename, int flags, umode_t mode);
	openat = 56,
	/// long sys_close(unsigned int fd);
	close = 57,
	/// long sys_vhangup(void);
	vhangup = 58,
	/// long sys_pipe2(int __user *fildes, int flags);
	pipe2 = 59,
	/// long sys_quotactl(unsigned int cmd, const char __user *special, qid_t id, void __user *addr);
	quotactl = 60,
	/// long sys_getdents64(unsigned int fd, struct linux_dirent64 __user *dirent, unsigned int count);
	getdents64 = 61,
	/// long sys_llseek(unsigned int fd, unsigned long offset_high, unsigned long offset_low, loff_t __user *result, unsigned int whence);
	lseek = 62,
	/// long sys_read(unsigned int fd, char __user *buf, size_t count);
	read = 63,
	/// long sys_write(unsigned int fd, const char __user *buf, size_t count);
	write = 64,
	/// long sys_readv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);
	readv = 65,
	/// long sys_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);
	writev = 66,
	/// long sys_pread64(unsigned int fd, char __user *buf, size_t count, loff_t pos);
	pread64 = 67,
	/// long sys_pwrite64(unsigned int fd, const char __user *buf, size_t count, loff_t pos);
	pwrite64 = 68,
	/// long sys_preadv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);
	preadv = 69,
	/// long sys_pwritev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);
	pwritev = 70,
	/// long sys_sendfile64(int out_fd, int in_fd, loff_t __user *offset, size_t count);
	sendfile64 = 71,
	/// long sys_pselect6_time32(int, fd_set __user *, fd_set __user *, fd_set __user *, struct old_timespec32 __user *, void __user *);
	pselect6_time32 = 72,
	/// long sys_ppoll_time32(struct pollfd __user *, unsigned int, struct old_timespec32 __user *, const sigset_t __user *, size_t);
	ppoll_time32 = 73,
	/// long sys_signalfd4(int ufd, sigset_t __user *user_mask, size_t sizemask, int flags);
	signalfd4 = 74,
	/// long sys_vmsplice(int fd, const struct iovec __user *iov, unsigned long nr_segs, unsigned int flags);
	vmsplice = 75,
	/// long sys_vmsplice(int fd, const struct iovec __user *iov, unsigned long nr_segs, unsigned int flags);
	splice = 76,
	/// long sys_tee(int fdin, int fdout, size_t len, unsigned int flags);
	tee = 77,
	/// long sys_readlinkat(int dfd, const char __user *path, char __user *buf, int bufsiz);
	readlinkat = 78,
	/// long sys_newfstatat(int dfd, const char __user *filename, struct stat __user *statbuf, int flag);
	newfstatat = 79,
	/// long sys_newfstat(unsigned int fd, struct stat __user *statbuf);
	newfstat = 80,
	/// long sys_sync(void);
	sync = 81,
	/// long sys_fsync(unsigned int fd);
	fsync = 82,
	/// long sys_fdatasync(unsigned int fd);
	fdatasync = 83,
	/// long sys_sync_file_range(int fd, loff_t offset, loff_t nbytes, unsigned int flags);
	sync_file_range = 84,
	/// long sys_timerfd_create(int clockid, int flags);
	timerfd_create = 85,
	/// long sys_timerfd_settime(int ufd, int flags, const struct __kernel_itimerspec __user *utmr, struct __kernel_itimerspec __user *otmr);
	timerfd_settime = 411,
	/// long sys_timerfd_gettime(int ufd, struct __kernel_itimerspec __user *otmr);
	timerfd_gettime = 410,
	/// long sys_utimensat(int dfd, const char __user *filename, struct __kernel_timespec __user *utimes, int flags);
	utimensat = 412,
	/// long sys_acct(const char __user *name);
	acct = 89,
	/// long sys_capget(cap_user_header_t header, cap_user_data_t dataptr);
	capget = 90,
	/// long sys_capset(cap_user_header_t header, const cap_user_data_t data);
	capset = 91,
	/// long sys_personality(unsigned int personality);
	personality = 92,
	/// long sys_exit(int error_code);
	exit = 93,
	/// long sys_exit_group(int error_code);
	exit_group = 94,
	/// long sys_waitid(int which, pid_t pid, struct siginfo __user *infop, int options, struct rusage __user *ru);
	waitid = 95,
	/// long sys_set_tid_address(int __user *tidptr);
	set_tid_address = 96,
	/// long sys_unshare(unsigned long unshare_flags);
	unshare = 97,
	/// long sys_futex(u32 __user *uaddr, int op, u32 val, struct __kernel_timespec __user *utime, u32 __user *uaddr2, u32 val3);
	futex = 422,
	/// long sys_set_robust_list(struct robust_list_head __user *head, size_t len);
	set_robust_list = 99,
	/// long sys_get_robust_list(int pid, struct robust_list_head __user * __user *head_ptr, size_t __user *len_ptr);
	get_robust_list = 100,
	/// long sys_nanosleep(struct __kernel_timespec __user *rqtp, struct __kernel_timespec __user *rmtp);
	nanosleep = 101,
	/// long sys_getitimer(int which, struct __kernel_old_itimerval __user *value);
	getitimer = 102,
	/// long sys_setitimer(int which, struct __kernel_old_itimerval __user *value, struct __kernel_old_itimerval __user *ovalue);
	setitimer = 103,
	/// long sys_kexec_load(unsigned long entry, unsigned long nr_segments, struct kexec_segment __user *segments, unsigned long flags);
	kexec_load = 104,
	/// long sys_init_module(void __user *umod, unsigned long len, const char __user *uargs);
	init_module = 105,
	/// long sys_delete_module(const char __user *name_user, unsigned int flags);
	delete_module = 106,
	/// long sys_timer_create(clockid_t which_clock, struct sigevent __user *timer_event_spec, timer_t __user * created_timer_id);
	timer_create = 107,
	/// long sys_timer_gettime(timer_t timer_id, struct __kernel_itimerspec __user *setting);
	timer_gettime = 408,
	/// long sys_timer_getoverrun(timer_t timer_id);
	timer_getoverrun = 109,
	/// long sys_timer_settime(timer_t timer_id, int flags, const struct __kernel_itimerspec __user *new_setting, struct __kernel_itimerspec __user *old_setting);
	timer_settime = 409,
	/// long sys_timer_delete(timer_t timer_id);
	timer_delete = 111,
	/// long sys_clock_settime(clockid_t which_clock, const struct __kernel_timespec __user *tp);
	clock_settime = 404,
	/// long sys_clock_gettime(clockid_t which_clock, struct __kernel_timespec __user *tp);
	clock_gettime = 403,
	/// long sys_clock_getres(clockid_t which_clock, struct __kernel_timespec __user *tp);
	clock_getres = 406,
	/// long sys_clock_nanosleep(clockid_t which_clock, int flags, const struct __kernel_timespec __user *rqtp, struct __kernel_timespec __user *rmtp);
	clock_nanosleep = 407,
	/// long sys_syslog(int type, char __user *buf, int len);
	syslog = 116,
	/// long sys_ptrace(long request, long pid, unsigned long addr, unsigned long data);
	ptrace = 117,
	/// long sys_sched_setparam(pid_t pid, struct sched_param __user *param);
	sched_setparam = 118,
	/// long sys_sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param);
	sched_setscheduler = 119,
	/// long sys_sched_getscheduler(pid_t pid);
	sched_getscheduler = 120,
	/// long sys_sched_getparam(pid_t pid, struct sched_param __user *param);
	sched_getparam = 121,
	/// long sys_sched_setaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);
	sched_setaffinity = 122,
	/// long sys_sched_getaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);
	sched_getaffinity = 123,
	/// long sys_sched_yield(void);
	sched_yield = 124,
	/// long sys_sched_get_priority_max(int policy);
	sched_get_priority_max = 125,
	/// long sys_sched_get_priority_min(int policy);
	sched_get_priority_min = 126,
	/// long sys_sched_rr_get_interval(pid_t pid, struct __kernel_timespec __user *interval);
	sched_rr_get_interval = 423,
	/// long sys_restart_syscall(void);
	restart_syscall = 128,
	/// long sys_kill(pid_t pid, int sig);
	kill = 129,
	/// long sys_tkill(pid_t pid, int sig);
	tkill = 130,
	/// long sys_tgkill(pid_t tgid, pid_t pid, int sig);
	tgkill = 131,
	/// long sys_sigaltstack(const struct sigaltstack __user *uss, struct sigaltstack __user *uoss);
	sigaltstack = 132,
	/// long sys_rt_sigsuspend(sigset_t __user *unewset, size_t sigsetsize);
	rt_sigsuspend = 133,
	/// long sys_rt_sigaction(int, const struct sigaction __user *, struct sigaction __user *, size_t);
	rt_sigaction = 134,
	/// long sys_rt_sigprocmask(int how, sigset_t __user *set, sigset_t __user *oset, size_t sigsetsize);
	rt_sigprocmask = 135,
	/// long sys_rt_sigpending(sigset_t __user *set, size_t sigsetsize);
	rt_sigpending = 136,
	/// long sys_rt_sigtimedwait_time32(const sigset_t __user *uthese, siginfo_t __user *uinfo, const struct old_timespec32 __user *uts, size_t sigsetsize);
	rt_sigtimedwait_time32 = 137,
	/// long sys_rt_sigqueueinfo(pid_t pid, int sig, siginfo_t __user *uinfo);
	rt_sigqueueinfo = 138,
	/// long sys_setpriority(int which, int who, int niceval);
	setpriority = 140,
	/// long sys_getpriority(int which, int who);
	getpriority = 141,
	/// long sys_reboot(int magic1, int magic2, unsigned int cmd, void __user *arg);
	reboot = 142,
	/// long sys_setregid(gid_t rgid, gid_t egid);
	setregid = 143,
	/// long sys_setgid(gid_t gid);
	setgid = 144,
	/// long sys_setreuid(uid_t ruid, uid_t euid);
	setreuid = 145,
	/// long sys_setuid(uid_t uid);
	setuid = 146,
	/// long sys_setresuid(uid_t ruid, uid_t euid, uid_t suid);
	setresuid = 147,
	/// long sys_getresuid(uid_t __user *ruid, uid_t __user *euid, uid_t __user *suid);
	getresuid = 148,
	/// long sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid);
	setresgid = 149,
	/// long sys_getresgid(gid_t __user *rgid, gid_t __user *egid, gid_t __user *sgid);
	getresgid = 150,
	/// long sys_setfsuid(uid_t uid);
	setfsuid = 151,
	/// long sys_setfsgid(gid_t gid);
	setfsgid = 152,
	/// long sys_times(struct tms __user *tbuf);
	times = 153,
	/// long sys_setpgid(pid_t pid, pid_t pgid);
	setpgid = 154,
	/// long sys_getpgid(pid_t pid);
	getpgid = 155,
	/// long sys_getsid(pid_t pid);
	getsid = 156,
	/// long sys_setsid(void);
	setsid = 157,
	/// long sys_getgroups(int gidsetsize, gid_t __user *grouplist);
	getgroups = 158,
	/// long sys_setgroups(int gidsetsize, gid_t __user *grouplist);
	setgroups = 159,
	/// long sys_newuname(struct new_utsname __user *name);
	newuname = 160,
	/// long sys_sethostname(char __user *name, int len);
	sethostname = 161,
	/// long sys_setdomainname(char __user *name, int len);
	setdomainname = 162,
	/// long sys_getrlimit(unsigned int resource, struct rlimit __user *rlim);
	getrlimit = 163,
	/// long sys_setrlimit(unsigned int resource, struct rlimit __user *rlim);
	setrlimit = 164,
	/// long sys_getrusage(int who, struct rusage __user *ru);
	getrusage = 165,
	/// long sys_umask(int mask);
	umask = 166,
	/// long sys_prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);
	prctl = 167,
	/// long sys_getcpu(unsigned __user *cpu, unsigned __user *node, struct getcpu_cache __user *cache);
	getcpu = 168,
	/// long sys_gettimeofday(struct __kernel_old_timeval __user *tv, struct timezone __user *tz);
	gettimeofday = 169,
	/// long sys_settimeofday(struct __kernel_old_timeval __user *tv, struct timezone __user *tz);
	settimeofday = 170,
	/// long sys_adjtimex(struct __kernel_timex __user *txc_p);
	adjtimex = 171,
	/// long sys_getpid(void);
	getpid = 172,
	/// long sys_getppid(void);
	getppid = 173,
	/// long sys_getuid(void);
	getuid = 174,
	/// long sys_geteuid(void);
	geteuid = 175,
	/// long sys_getgid(void);
	getgid = 176,
	/// long sys_getegid(void);
	getegid = 177,
	/// long sys_gettid(void);
	gettid = 178,
	/// long sys_sysinfo(struct sysinfo __user *info);
	sysinfo = 179,
	/// long sys_mq_open(const char __user *name, int oflag, umode_t mode, struct mq_attr __user *attr);
	mq_open = 180,
	/// long sys_mq_unlink(const char __user *name);
	mq_unlink = 181,
	/// long sys_mq_timedsend(mqd_t mqdes, const char __user *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct __kernel_timespec __user *abs_timeout);
	mq_timedsend = 418,
	/// long sys_mq_timedreceive(mqd_t mqdes, char __user *msg_ptr, size_t msg_len, unsigned int __user *msg_prio, const struct __kernel_timespec __user *abs_timeout);
	mq_timedreceive = 419,
	/// long sys_mq_notify(mqd_t mqdes, const struct sigevent __user *notification);
	mq_notify = 184,
	/// long sys_mq_getsetattr(mqd_t mqdes, const struct mq_attr __user *mqstat, struct mq_attr __user *omqstat);
	mq_getsetattr = 185,
	/// long sys_msgget(key_t key, int msgflg);
	msgget = 186,
	/// long sys_old_msgctl(int msqid, int cmd, struct msqid_ds __user *buf);
	msgctl = 187,
	/// long sys_msgrcv(int msqid, struct msgbuf __user *msgp, size_t msgsz, long msgtyp, int msgflg);
	msgrcv = 188,
	/// long sys_msgsnd(int msqid, struct msgbuf __user *msgp, size_t msgsz, int msgflg);
	msgsnd = 189,
	/// long sys_semget(key_t key, int nsems, int semflg);
	semget = 190,
	/// long sys_semctl(int semid, int semnum, int cmd, unsigned long arg);
	semctl = 191,
	/// long sys_semtimedop(int semid, struct sembuf __user *sops, unsigned nsops, const struct __kernel_timespec __user *timeout);
	semtimedop = 420,
	/// long sys_semop(int semid, struct sembuf __user *sops, unsigned nsops);
	semop = 193,
	/// long sys_shmget(key_t key, size_t size, int flag);
	shmget = 194,
	/// long sys_old_shmctl(int shmid, int cmd, struct shmid_ds __user *buf);
	shmctl = 195,
	/// long sys_shmat(int shmid, char __user *shmaddr, int shmflg);
	shmat = 196,
	/// long sys_shmdt(char __user *shmaddr);
	shmdt = 197,
	/// long sys_socket(int, int, int);
	socket = 198,
	/// long sys_socketpair(int, int, int, int __user *);
	socketpair = 199,
	/// long sys_bind(int, struct sockaddr __user *, int);
	bind = 200,
	/// long sys_listen(int, int);
	listen = 201,
	/// long sys_accept(int, struct sockaddr __user *, int __user *);
	accept = 202,
	/// long sys_connect(int, struct sockaddr __user *, int);
	connect = 203,
	/// long sys_getsockname(int, struct sockaddr __user *, int __user *);
	getsockname = 204,
	/// long sys_getpeername(int, struct sockaddr __user *, int __user *);
	getpeername = 205,
	/// long sys_sendto(int, void __user *, size_t, unsigned, struct sockaddr __user *, int);
	sendto = 206,
	/// long sys_recvfrom(int, void __user *, size_t, unsigned, struct sockaddr __user *, int __user *);
	recvfrom = 207,
	/// long sys_setsockopt(int fd, int level, int optname, char __user *optval, int optlen);
	setsockopt = 208,
	/// long sys_getsockopt(int fd, int level, int optname, char __user *optval, int __user *optlen);
	getsockopt = 209,
	/// long sys_shutdown(int, int);
	shutdown = 210,
	/// long sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned flags);
	sendmsg = 211,
	/// long sys_recvmsg(int fd, struct user_msghdr __user *msg, unsigned flags);
	recvmsg = 212,
	/// long sys_readahead(int fd, loff_t offset, size_t count);
	readahead = 213,
	/// long sys_brk(unsigned long brk);
	brk = 214,
	/// long sys_munmap(unsigned long addr, size_t len);
	munmap = 215,
	/// long sys_mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr);
	mremap = 216,
	/// long sys_add_key(const char __user *_type, const char __user *_description, const void __user *_payload, size_t plen, key_serial_t destringid);
	add_key = 217,
	/// long sys_request_key(const char __user *_type, const char __user *_description, const char __user *_callout_info, key_serial_t destringid);
	request_key = 218,
	/// long sys_keyctl(int cmd, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);
	keyctl = 219,
	/// long sys_clone(unsigned long, unsigned long, int __user *, unsigned long, int __user *);
	clone = 220,
	/// long sys_execve(const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp);
	execve = 221,
	/// long sys_old_mmap(struct mmap_arg_struct __user *arg);
	mmap = 222,
	/// long sys_fadvise64_64(int fd, loff_t offset, loff_t len, int advice);
	fadvise64_64 = 223,
	/// long sys_swapon(const char __user *specialfile, int swap_flags);
	swapon = 224,
	/// long sys_swapoff(const char __user *specialfile);
	swapoff = 225,
	/// long sys_mprotect(unsigned long start, size_t len, unsigned long prot);
	mprotect = 226,
	/// long sys_msync(unsigned long start, size_t len, int flags);
	msync = 227,
	/// long sys_mlock(unsigned long start, size_t len);
	mlock = 228,
	/// long sys_munlock(unsigned long start, size_t len);
	munlock = 229,
	/// long sys_mlockall(int flags);
	mlockall = 230,
	/// long sys_munlockall(void);
	munlockall = 231,
	/// long sys_mincore(unsigned long start, size_t len, unsigned char __user * vec);
	mincore = 232,
	/// long sys_madvise(unsigned long start, size_t len, int behavior);
	madvise = 233,
	/// long sys_remap_file_pages(unsigned long start, unsigned long size, unsigned long prot, unsigned long pgoff, unsigned long flags);
	remap_file_pages = 234,
	/// long sys_mbind(unsigned long start, unsigned long len, unsigned long mode, const unsigned long __user *nmask, unsigned long maxnode, unsigned flags);
	mbind = 235,
	/// long sys_get_mempolicy(int __user *policy, unsigned long __user *nmask, unsigned long maxnode, unsigned long addr, unsigned long flags);
	get_mempolicy = 236,
	/// long sys_set_mempolicy(int mode, const unsigned long __user *nmask, unsigned long maxnode);
	set_mempolicy = 237,
	/// long sys_migrate_pages(pid_t pid, unsigned long maxnode, const unsigned long __user *from, const unsigned long __user *to);
	migrate_pages = 238,
	/// long sys_move_pages(pid_t pid, unsigned long nr_pages, const void __user * __user *pages, const int __user *nodes, int __user *status, int flags);
	move_pages = 239,
	/// long sys_rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig, siginfo_t __user *uinfo);
	rt_tgsigqueueinfo = 240,
	/// long sys_perf_event_open(
	perf_event_open = 241,
	/// long sys_accept4(int, struct sockaddr __user *, int __user *, int);
	accept4 = 242,
	/// long sys_recvmmsg_time32(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags, struct old_timespec32 __user *timeout);
	recvmmsg_time32 = 243,
	/// long sys_wait4(pid_t pid, int __user *stat_addr, int options, struct rusage __user *ru);
	wait4 = 260,
	/// long sys_prlimit64(pid_t pid, unsigned int resource, const struct rlimit64 __user *new_rlim, struct rlimit64 __user *old_rlim);
	prlimit64 = 261,
	/// long sys_fanotify_init(unsigned int flags, unsigned int event_f_flags);
	fanotify_init = 262,
	/// long sys_fanotify_mark(int fanotify_fd, unsigned int flags, u64 mask, int fd, const char __user *pathname);
	fanotify_mark = 263,
	/// long sys_name_to_handle_at(int dfd, const char __user *name, struct file_handle __user *handle, int __user *mnt_id, int flag);
	name_to_handle_at = 264,
	/// long sys_open_by_handle_at(int mountdirfd, struct file_handle __user *handle, int flags);
	open_by_handle_at = 265,
	/// long sys_clock_adjtime(clockid_t which_clock, struct __kernel_timex __user *tx);
	clock_adjtime = 405,
	/// long sys_syncfs(int fd);
	syncfs = 267,
	/// long sys_setns(int fd, int nstype);
	setns = 268,
	/// long sys_sendmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags);
	sendmmsg = 269,
	/// long sys_process_vm_readv(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);
	process_vm_readv = 270,
	/// long sys_process_vm_writev(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);
	process_vm_writev = 271,
	/// long sys_kcmp(pid_t pid1, pid_t pid2, int type, unsigned long idx1, unsigned long idx2);
	kcmp = 272,
	/// long sys_finit_module(int fd, const char __user *uargs, int flags);
	finit_module = 273,
	/// long sys_sched_setattr(pid_t pid, struct sched_attr __user *attr, unsigned int flags);
	sched_setattr = 274,
	/// long sys_sched_getattr(pid_t pid, struct sched_attr __user *attr, unsigned int size, unsigned int flags);
	sched_getattr = 275,
	/// long sys_renameat2(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, unsigned int flags);
	renameat2 = 276,
	/// long sys_seccomp(unsigned int op, unsigned int flags, void __user *uargs);
	seccomp = 277,
	/// long sys_getrandom(char __user *buf, size_t count, unsigned int flags);
	getrandom = 278,
	/// long sys_memfd_create(const char __user *uname_ptr, unsigned int flags);
	memfd_create = 279,
	/// long sys_bpf(int cmd, union bpf_attr *attr, unsigned int size);
	bpf = 280,
	/// long sys_execveat(int dfd, const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp, int flags);
	execveat = 281,
	/// long sys_userfaultfd(int flags);
	userfaultfd = 282,
	/// long sys_membarrier(int cmd, unsigned int flags, int cpu_id);
	membarrier = 283,
	/// long sys_mlock2(unsigned long start, size_t len, int flags);
	mlock2 = 284,
	/// long sys_copy_file_range(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);
	copy_file_range = 285,
	/// long sys_preadv2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);
	preadv2 = 286,
	/// long sys_pwritev2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);
	pwritev2 = 287,
	/// long sys_pkey_mprotect(unsigned long start, size_t len, unsigned long prot, int pkey);
	pkey_mprotect = 288,
	/// long sys_pkey_alloc(unsigned long flags, unsigned long init_val);
	pkey_alloc = 289,
	/// long sys_pkey_free(int pkey);
	pkey_free = 290,
	/// long sys_statx(int dfd, const char __user *path, unsigned flags, unsigned mask, struct statx __user *buffer);
	statx = 291,
	/// long sys_io_pgetevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct __kernel_timespec __user *timeout, const struct __aio_sigset *sig);
	io_pgetevents = 416,
	/// long sys_rseq(struct rseq __user *rseq, uint32_t rseq_len, int flags, uint32_t sig);
	rseq = 293,
	/// long sys_kexec_file_load(int kernel_fd, int initrd_fd, unsigned long cmdline_len, const char __user *cmdline_ptr, unsigned long flags);
	kexec_file_load = 294,
	/// long sys_pidfd_send_signal(int pidfd, int sig, siginfo_t __user *info, unsigned int flags);
	pidfd_send_signal = 424,
	/// long sys_io_uring_setup(u32 entries, struct io_uring_params __user *p);
	io_uring_setup = 425,
	/// long sys_io_uring_enter(unsigned int fd, u32 to_submit, u32 min_complete, u32 flags, const sigset_t __user *sig, size_t sigsz);
	io_uring_enter = 426,
	/// long sys_io_uring_register(unsigned int fd, unsigned int op, void __user *arg, unsigned int nr_args);
	io_uring_register = 427,
	/// long sys_open_tree(int dfd, const char __user *path, unsigned flags);
	open_tree = 428,
	/// long sys_move_mount(int from_dfd, const char __user *from_path, int to_dfd, const char __user *to_path, unsigned int ms_flags);
	move_mount = 429,
	/// long sys_fsopen(const char __user *fs_name, unsigned int flags);
	fsopen = 430,
	/// long sys_fsconfig(int fs_fd, unsigned int cmd, const char __user *key, const void __user *value, int aux);
	fsconfig = 431,
	/// long sys_fsmount(int fs_fd, unsigned int flags, unsigned int ms_flags);
	fsmount = 432,
	/// long sys_fspick(int dfd, const char __user *path, unsigned int flags);
	fspick = 433,
	/// long sys_pidfd_open(pid_t pid, unsigned int flags);
	pidfd_open = 434,
	/// long sys_clone3(struct clone_args __user *uargs, size_t size);
	clone3 = 435,
	/// long sys_close_range(unsigned int fd, unsigned int max_fd, unsigned int flags);
	close_range = 436,
	/// long sys_openat2(int dfd, const char __user *filename, struct open_how *how, size_t size);
	openat2 = 437,
	/// long sys_pidfd_getfd(int pidfd, int fd, unsigned int flags);
	pidfd_getfd = 438,
	/// long sys_faccessat2(int dfd, const char __user *filename, int mode, int flags);
	faccessat2 = 439,
	/// long sys_process_madvise(int pidfd, const struct iovec __user *vec, size_t vlen, int behavior, unsigned int flags);
	process_madvise = 440,
}


impl TryFrom<u64> for LinuxSyscall {
    type Error = u64;

    fn try_from(value: u64) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(LinuxSyscall::io_setup),
            1 => Ok(LinuxSyscall::io_destroy),
            2 => Ok(LinuxSyscall::io_submit),
            3 => Ok(LinuxSyscall::io_cancel),
            4 => Ok(LinuxSyscall::io_getevents),
            5 => Ok(LinuxSyscall::setxattr),
            6 => Ok(LinuxSyscall::lsetxattr),
            7 => Ok(LinuxSyscall::fsetxattr),
            8 => Ok(LinuxSyscall::getxattr),
            9 => Ok(LinuxSyscall::lgetxattr),
           10 => Ok(LinuxSyscall::fgetxattr),
           11 => Ok(LinuxSyscall::listxattr),
           12 => Ok(LinuxSyscall::llistxattr),
           13 => Ok(LinuxSyscall::flistxattr),
           14 => Ok(LinuxSyscall::removexattr),
           15 => Ok(LinuxSyscall::lremovexattr),
           16 => Ok(LinuxSyscall::fremovexattr),
           17 => Ok(LinuxSyscall::getcwd),
           18 => Ok(LinuxSyscall::lookup_dcookie),
           19 => Ok(LinuxSyscall::eventfd2),
           20 => Ok(LinuxSyscall::epoll_create1),
           21 => Ok(LinuxSyscall::epoll_ctl),
           22 => Ok(LinuxSyscall::epoll_pwait),
           23 => Ok(LinuxSyscall::dup),
           24 => Ok(LinuxSyscall::dup3),
           25 => Ok(LinuxSyscall::fcntl64),
           26 => Ok(LinuxSyscall::inotify_init1),
           27 => Ok(LinuxSyscall::inotify_add_watch),
           28 => Ok(LinuxSyscall::inotify_rm_watch),
           29 => Ok(LinuxSyscall::ioctl),
           30 => Ok(LinuxSyscall::ioprio_set),
           31 => Ok(LinuxSyscall::ioprio_get),
           32 => Ok(LinuxSyscall::flock),
           33 => Ok(LinuxSyscall::mknodat),
           34 => Ok(LinuxSyscall::mkdirat),
           35 => Ok(LinuxSyscall::unlinkat),
           36 => Ok(LinuxSyscall::symlinkat),
           37 => Ok(LinuxSyscall::linkat),
           38 => Ok(LinuxSyscall::renameat),
           39 => Ok(LinuxSyscall::umount),
           40 => Ok(LinuxSyscall::mount),
           41 => Ok(LinuxSyscall::pivot_root),
           42 => Ok(LinuxSyscall::ni_syscall),
           43 => Ok(LinuxSyscall::statfs64),
           44 => Ok(LinuxSyscall::fstatfs64),
           45 => Ok(LinuxSyscall::truncate64),
           46 => Ok(LinuxSyscall::ftruncate64),
           47 => Ok(LinuxSyscall::fallocate),
           48 => Ok(LinuxSyscall::faccessat),
           49 => Ok(LinuxSyscall::chdir),
           50 => Ok(LinuxSyscall::fchdir),
           51 => Ok(LinuxSyscall::chroot),
           52 => Ok(LinuxSyscall::fchmod),
           53 => Ok(LinuxSyscall::fchmodat),
           54 => Ok(LinuxSyscall::fchownat),
           55 => Ok(LinuxSyscall::fchown),
           56 => Ok(LinuxSyscall::openat),
           57 => Ok(LinuxSyscall::close),
           58 => Ok(LinuxSyscall::vhangup),
           59 => Ok(LinuxSyscall::pipe2),
           60 => Ok(LinuxSyscall::quotactl),
           61 => Ok(LinuxSyscall::getdents64),
           62 => Ok(LinuxSyscall::lseek),
           63 => Ok(LinuxSyscall::read),
           64 => Ok(LinuxSyscall::write),
           65 => Ok(LinuxSyscall::readv),
           66 => Ok(LinuxSyscall::writev),
           67 => Ok(LinuxSyscall::pread64),
           68 => Ok(LinuxSyscall::pwrite64),
           69 => Ok(LinuxSyscall::preadv),
           70 => Ok(LinuxSyscall::pwritev),
           71 => Ok(LinuxSyscall::sendfile64),
           72 => Ok(LinuxSyscall::pselect6_time32),
           73 => Ok(LinuxSyscall::ppoll_time32),
           74 => Ok(LinuxSyscall::signalfd4),
           75 => Ok(LinuxSyscall::vmsplice),
           76 => Ok(LinuxSyscall::splice),
           77 => Ok(LinuxSyscall::tee),
           78 => Ok(LinuxSyscall::readlinkat),
           79 => Ok(LinuxSyscall::newfstatat),
           80 => Ok(LinuxSyscall::newfstat),
           81 => Ok(LinuxSyscall::sync),
           82 => Ok(LinuxSyscall::fsync),
           83 => Ok(LinuxSyscall::fdatasync),
           84 => Ok(LinuxSyscall::sync_file_range),
           85 => Ok(LinuxSyscall::timerfd_create),
          411 => Ok(LinuxSyscall::timerfd_settime),
          410 => Ok(LinuxSyscall::timerfd_gettime),
          412 => Ok(LinuxSyscall::utimensat),
           89 => Ok(LinuxSyscall::acct),
           90 => Ok(LinuxSyscall::capget),
           91 => Ok(LinuxSyscall::capset),
           92 => Ok(LinuxSyscall::personality),
           93 => Ok(LinuxSyscall::exit),
           94 => Ok(LinuxSyscall::exit_group),
           95 => Ok(LinuxSyscall::waitid),
           96 => Ok(LinuxSyscall::set_tid_address),
           97 => Ok(LinuxSyscall::unshare),
          422 => Ok(LinuxSyscall::futex),
           99 => Ok(LinuxSyscall::set_robust_list),
          100 => Ok(LinuxSyscall::get_robust_list),
          101 => Ok(LinuxSyscall::nanosleep),
          102 => Ok(LinuxSyscall::getitimer),
          103 => Ok(LinuxSyscall::setitimer),
          104 => Ok(LinuxSyscall::kexec_load),
          105 => Ok(LinuxSyscall::init_module),
          106 => Ok(LinuxSyscall::delete_module),
          107 => Ok(LinuxSyscall::timer_create),
          408 => Ok(LinuxSyscall::timer_gettime),
          109 => Ok(LinuxSyscall::timer_getoverrun),
          409 => Ok(LinuxSyscall::timer_settime),
          111 => Ok(LinuxSyscall::timer_delete),
          404 => Ok(LinuxSyscall::clock_settime),
          403 => Ok(LinuxSyscall::clock_gettime),
          406 => Ok(LinuxSyscall::clock_getres),
          407 => Ok(LinuxSyscall::clock_nanosleep),
          116 => Ok(LinuxSyscall::syslog),
          117 => Ok(LinuxSyscall::ptrace),
          118 => Ok(LinuxSyscall::sched_setparam),
          119 => Ok(LinuxSyscall::sched_setscheduler),
          120 => Ok(LinuxSyscall::sched_getscheduler),
          121 => Ok(LinuxSyscall::sched_getparam),
          122 => Ok(LinuxSyscall::sched_setaffinity),
          123 => Ok(LinuxSyscall::sched_getaffinity),
          124 => Ok(LinuxSyscall::sched_yield),
          125 => Ok(LinuxSyscall::sched_get_priority_max),
          126 => Ok(LinuxSyscall::sched_get_priority_min),
          423 => Ok(LinuxSyscall::sched_rr_get_interval),
          128 => Ok(LinuxSyscall::restart_syscall),
          129 => Ok(LinuxSyscall::kill),
          130 => Ok(LinuxSyscall::tkill),
          131 => Ok(LinuxSyscall::tgkill),
          132 => Ok(LinuxSyscall::sigaltstack),
          133 => Ok(LinuxSyscall::rt_sigsuspend),
          134 => Ok(LinuxSyscall::rt_sigaction),
          135 => Ok(LinuxSyscall::rt_sigprocmask),
          136 => Ok(LinuxSyscall::rt_sigpending),
          137 => Ok(LinuxSyscall::rt_sigtimedwait_time32),
          138 => Ok(LinuxSyscall::rt_sigqueueinfo),
          140 => Ok(LinuxSyscall::setpriority),
          141 => Ok(LinuxSyscall::getpriority),
          142 => Ok(LinuxSyscall::reboot),
          143 => Ok(LinuxSyscall::setregid),
          144 => Ok(LinuxSyscall::setgid),
          145 => Ok(LinuxSyscall::setreuid),
          146 => Ok(LinuxSyscall::setuid),
          147 => Ok(LinuxSyscall::setresuid),
          148 => Ok(LinuxSyscall::getresuid),
          149 => Ok(LinuxSyscall::setresgid),
          150 => Ok(LinuxSyscall::getresgid),
          151 => Ok(LinuxSyscall::setfsuid),
          152 => Ok(LinuxSyscall::setfsgid),
          153 => Ok(LinuxSyscall::times),
          154 => Ok(LinuxSyscall::setpgid),
          155 => Ok(LinuxSyscall::getpgid),
          156 => Ok(LinuxSyscall::getsid),
          157 => Ok(LinuxSyscall::setsid),
          158 => Ok(LinuxSyscall::getgroups),
          159 => Ok(LinuxSyscall::setgroups),
          160 => Ok(LinuxSyscall::newuname),
          161 => Ok(LinuxSyscall::sethostname),
          162 => Ok(LinuxSyscall::setdomainname),
          163 => Ok(LinuxSyscall::getrlimit),
          164 => Ok(LinuxSyscall::setrlimit),
          165 => Ok(LinuxSyscall::getrusage),
          166 => Ok(LinuxSyscall::umask),
          167 => Ok(LinuxSyscall::prctl),
          168 => Ok(LinuxSyscall::getcpu),
          169 => Ok(LinuxSyscall::gettimeofday),
          170 => Ok(LinuxSyscall::settimeofday),
          171 => Ok(LinuxSyscall::adjtimex),
          172 => Ok(LinuxSyscall::getpid),
          173 => Ok(LinuxSyscall::getppid),
          174 => Ok(LinuxSyscall::getuid),
          175 => Ok(LinuxSyscall::geteuid),
          176 => Ok(LinuxSyscall::getgid),
          177 => Ok(LinuxSyscall::getegid),
          178 => Ok(LinuxSyscall::gettid),
          179 => Ok(LinuxSyscall::sysinfo),
          180 => Ok(LinuxSyscall::mq_open),
          181 => Ok(LinuxSyscall::mq_unlink),
          418 => Ok(LinuxSyscall::mq_timedsend),
          419 => Ok(LinuxSyscall::mq_timedreceive),
          184 => Ok(LinuxSyscall::mq_notify),
          185 => Ok(LinuxSyscall::mq_getsetattr),
          186 => Ok(LinuxSyscall::msgget),
          187 => Ok(LinuxSyscall::msgctl),
          188 => Ok(LinuxSyscall::msgrcv),
          189 => Ok(LinuxSyscall::msgsnd),
          190 => Ok(LinuxSyscall::semget),
          191 => Ok(LinuxSyscall::semctl),
          420 => Ok(LinuxSyscall::semtimedop),
          193 => Ok(LinuxSyscall::semop),
          194 => Ok(LinuxSyscall::shmget),
          195 => Ok(LinuxSyscall::shmctl),
          196 => Ok(LinuxSyscall::shmat),
          197 => Ok(LinuxSyscall::shmdt),
          198 => Ok(LinuxSyscall::socket),
          199 => Ok(LinuxSyscall::socketpair),
          200 => Ok(LinuxSyscall::bind),
          201 => Ok(LinuxSyscall::listen),
          202 => Ok(LinuxSyscall::accept),
          203 => Ok(LinuxSyscall::connect),
          204 => Ok(LinuxSyscall::getsockname),
          205 => Ok(LinuxSyscall::getpeername),
          206 => Ok(LinuxSyscall::sendto),
          207 => Ok(LinuxSyscall::recvfrom),
          208 => Ok(LinuxSyscall::setsockopt),
          209 => Ok(LinuxSyscall::getsockopt),
          210 => Ok(LinuxSyscall::shutdown),
          211 => Ok(LinuxSyscall::sendmsg),
          212 => Ok(LinuxSyscall::recvmsg),
          213 => Ok(LinuxSyscall::readahead),
          214 => Ok(LinuxSyscall::brk),
          215 => Ok(LinuxSyscall::munmap),
          216 => Ok(LinuxSyscall::mremap),
          217 => Ok(LinuxSyscall::add_key),
          218 => Ok(LinuxSyscall::request_key),
          219 => Ok(LinuxSyscall::keyctl),
          220 => Ok(LinuxSyscall::clone),
          221 => Ok(LinuxSyscall::execve),
          222 => Ok(LinuxSyscall::mmap),
          223 => Ok(LinuxSyscall::fadvise64_64),
          224 => Ok(LinuxSyscall::swapon),
          225 => Ok(LinuxSyscall::swapoff),
          226 => Ok(LinuxSyscall::mprotect),
          227 => Ok(LinuxSyscall::msync),
          228 => Ok(LinuxSyscall::mlock),
          229 => Ok(LinuxSyscall::munlock),
          230 => Ok(LinuxSyscall::mlockall),
          231 => Ok(LinuxSyscall::munlockall),
          232 => Ok(LinuxSyscall::mincore),
          233 => Ok(LinuxSyscall::madvise),
          234 => Ok(LinuxSyscall::remap_file_pages),
          235 => Ok(LinuxSyscall::mbind),
          236 => Ok(LinuxSyscall::get_mempolicy),
          237 => Ok(LinuxSyscall::set_mempolicy),
          238 => Ok(LinuxSyscall::migrate_pages),
          239 => Ok(LinuxSyscall::move_pages),
          240 => Ok(LinuxSyscall::rt_tgsigqueueinfo),
          241 => Ok(LinuxSyscall::perf_event_open),
          242 => Ok(LinuxSyscall::accept4),
          243 => Ok(LinuxSyscall::recvmmsg_time32),
          260 => Ok(LinuxSyscall::wait4),
          261 => Ok(LinuxSyscall::prlimit64),
          262 => Ok(LinuxSyscall::fanotify_init),
          263 => Ok(LinuxSyscall::fanotify_mark),
          264 => Ok(LinuxSyscall::name_to_handle_at),
          265 => Ok(LinuxSyscall::open_by_handle_at),
          405 => Ok(LinuxSyscall::clock_adjtime),
          267 => Ok(LinuxSyscall::syncfs),
          268 => Ok(LinuxSyscall::setns),
          269 => Ok(LinuxSyscall::sendmmsg),
          270 => Ok(LinuxSyscall::process_vm_readv),
          271 => Ok(LinuxSyscall::process_vm_writev),
          272 => Ok(LinuxSyscall::kcmp),
          273 => Ok(LinuxSyscall::finit_module),
          274 => Ok(LinuxSyscall::sched_setattr),
          275 => Ok(LinuxSyscall::sched_getattr),
          276 => Ok(LinuxSyscall::renameat2),
          277 => Ok(LinuxSyscall::seccomp),
          278 => Ok(LinuxSyscall::getrandom),
          279 => Ok(LinuxSyscall::memfd_create),
          280 => Ok(LinuxSyscall::bpf),
          281 => Ok(LinuxSyscall::execveat),
          282 => Ok(LinuxSyscall::userfaultfd),
          283 => Ok(LinuxSyscall::membarrier),
          284 => Ok(LinuxSyscall::mlock2),
          285 => Ok(LinuxSyscall::copy_file_range),
          286 => Ok(LinuxSyscall::preadv2),
          287 => Ok(LinuxSyscall::pwritev2),
          288 => Ok(LinuxSyscall::pkey_mprotect),
          289 => Ok(LinuxSyscall::pkey_alloc),
          290 => Ok(LinuxSyscall::pkey_free),
          291 => Ok(LinuxSyscall::statx),
          416 => Ok(LinuxSyscall::io_pgetevents),
          293 => Ok(LinuxSyscall::rseq),
          294 => Ok(LinuxSyscall::kexec_file_load),
          424 => Ok(LinuxSyscall::pidfd_send_signal),
          425 => Ok(LinuxSyscall::io_uring_setup),
          426 => Ok(LinuxSyscall::io_uring_enter),
          427 => Ok(LinuxSyscall::io_uring_register),
          428 => Ok(LinuxSyscall::open_tree),
          429 => Ok(LinuxSyscall::move_mount),
          430 => Ok(LinuxSyscall::fsopen),
          431 => Ok(LinuxSyscall::fsconfig),
          432 => Ok(LinuxSyscall::fsmount),
          433 => Ok(LinuxSyscall::fspick),
          434 => Ok(LinuxSyscall::pidfd_open),
          435 => Ok(LinuxSyscall::clone3),
          436 => Ok(LinuxSyscall::close_range),
          437 => Ok(LinuxSyscall::openat2),
          438 => Ok(LinuxSyscall::pidfd_getfd),
          439 => Ok(LinuxSyscall::faccessat2),
          440 => Ok(LinuxSyscall::process_madvise),
            err => Err(err),
        }
    }
}